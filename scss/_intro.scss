#loading-mask, #intro  {
   background: $bg;
   height: 100vh - ($headerHeight * 2);
}

#loading-mask {
   display: none;
   position: absolute;
   width: 100%;
   z-index: 99;
}

#intro {
   position: relative;
   margin: $headerHeight 0 0;
   overflow: hidden;
   text-align: center;
  
   .terrain, #intro-text {
      display: block;
      position: absolute;
   }

   .terrain {
      bottom: 0;
      fill: $fg;
      max-width: 75vmin;
      pointer-events: none;
   }

   .terrain.right {
      right: 0;
   }

   #intro-text {
      top: 15vmin;
      width: 100%;
      color: $fg;
      padding: 0 1.5rem;
      pointer-events: none;

      h1, h2 {
         pointer-events: all;
      }

      h1 {
         margin-bottom: 0;
      }

      h2 {
         margin-top: 0;
      }

      #intro-btn {
         height: 3rem;
         padding: 0;
         cursor: pointer;
         font: bold 1rem $headingFont;
         outline: none;
         pointer-events: all;

         @include double-border(50rem, $inv: true);

         p {
            display: inline-block;
            white-space: nowrap;
            margin: $border;
            margin-left: 1rem;
            line-height: (3rem / 2) - ($border * 2);
         }
      }

      #intro-arrow {
         fill: none;
         stroke: $fg;
         stroke-linecap: round;
         stroke-linejoin: round;
         stroke-width: 0.5px;
         float: right;
         height: 3rem - ($border * 2);
         width: 3rem - ($border * 2);
         padding: calc(#{$border} - 1px);

         circle {
            fill: $bg;
            stroke: none;
         }
      }
   }
}

.tree {
   display: block;
   fill: none;
   stroke-linecap: round;
   stroke-linejoin: round;
   stroke-width: 1.2px;
   pointer-events: none;

   path:not(.trunk) {
      pointer-events: none;
   }
}

.tree path {
   pointer-events: visibleStroke;
}

@for $i from 1 through $layers {
   $scale: round((($i - 1) / ($layers - 1)) * ($layers - 1));
   $r: red($bg) + (((red($fg) - red($bg)) / $layers) * ($scale + 1));
   $g: green($bg) + (((green($fg) - green($bg)) / $layers) * ($scale + 1));
   $b: blue($bg) + (((blue($fg) - blue($bg)) / $layers) * ($scale + 1));
      
   .layer#{$i} > path {
      fill: rgb($r, $g, $b);
   }

   .layer#{$i} .tree {
      stroke: rgb($r, $g, $b);
      
      .trunk {
      fill: rgb($r, $g, $b);
      }
   }
}

@mixin intro--sm() {
   #intro #intro-text, #intro #intro-text #intro-btn {
      font-size: 3vmin;
   }

   #intro #intro-text #intro-btn {
      height: 10vmin;

      p {
         line-height: calc((10vmin / 2) - (#{$border} * 2));
         margin-left: 4vmin;
      }

      #intro-arrow {
         height: calc(10vmin - (#{$border} * 2));
         width: calc(10vmin - (#{$border} * 2));
      }
   }
}

@mixin intro--md($headerHeight, $border) {
   #loading-mask, #intro  {
      height: 100vh - ($headerHeight * 2);
   }

   #intro #intro-text, #intro #intro-text #intro-btn {
      font-size: 1.5rem;
   }

   #intro {
      margin: $headerHeight 0 0;

      #intro-text #intro-btn {
         border: solid $border $fg;
         box-shadow: inset 0 0 0 $border $bg;
         height: 5rem;

         @include double-border(50rem, $border, $inv: true);

         p {
            line-height: (5rem / 2) - ($border * 2);
            margin: $border;
            margin-left: 2rem;
         }

         #intro-arrow {
            height: 5rem - ($border * 2);
            width: 5rem - ($border * 2);
            padding: calc(#{$border} - 1px);
         }
      }
   }
}